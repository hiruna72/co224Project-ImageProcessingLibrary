	.arch armv5t
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 6
	.eabi_attribute 34, 0
	.eabi_attribute 18, 4
	.file	"inC.c"
	.section	.rodata
	.align	2
.LC0:
	.ascii	"%d %d\000"
	.align	2
.LC1:
	.ascii	"%d\000"
	.align	2
.LC2:
	.ascii	"%d \000"
	.text
	.align	2
	.global	main
	.type	main, %function
main:
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 1, uses_anonymous_args = 0
	stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add	fp, sp, #32
	sub	sp, sp, #52
	mov	r3, sp
	str	r3, [fp, #-72]
	sub	r2, fp, #64
	sub	r3, fp, #68
	ldr	r0, .L10
	mov	r1, r2
	mov	r2, r3
	bl	__isoc99_scanf
	ldr	r0, [fp, #-68]
	ldr	ip, [fp, #-64]
	sub	r3, r0, #1
	str	r3, [fp, #-48]
	mov	r2, r0
	mov	r3, r2
	mov	r4, #0
	mov	r6, r4, asl #5
	orr	r6, r6, r3, lsr #27
	mov	r5, r3, asl #5
	mov	r3, r0
	mov	r3, r3, asl #2
	str	r3, [fp, #-76]
	sub	r3, ip, #1
	str	r3, [fp, #-44]
	mov	r3, r0
	mov	r5, r3
	mov	r6, #0
	mov	r3, ip
	mov	r1, r3
	mov	r2, #0
	mul	r4, r1, r6
	mul	r3, r5, r2
	add	r3, r4, r3
	str	r3, [fp, #-80]
	umull	r3, r4, r5, r1
	ldr	r1, [fp, #-80]
	add	r2, r1, r4
	mov	r4, r2
	mov	sl, r4, asl #5
	orr	sl, sl, r3, lsr #27
	mov	r9, r3, asl #5
	mov	r3, r0
	mov	r5, r3
	mov	r6, #0
	mov	r3, ip
	mov	r1, r3
	mov	r2, #0
	mul	r4, r1, r6
	mul	r3, r5, r2
	add	sl, r4, r3
	umull	r3, r4, r5, r1
	add	r2, sl, r4
	mov	r4, r2
	mov	r8, r4, asl #5
	orr	r8, r8, r3, lsr #27
	mov	r7, r3, asl #5
	mov	r3, r0
	mov	r2, ip
	mul	r3, r2, r3
	mov	r3, r3, asl #2
	add	r3, r3, #3
	add	r3, r3, #7
	mov	r3, r3, lsr #3
	mov	r3, r3, asl #3
	sub	sp, sp, r3
	mov	r3, sp
	add	r3, r3, #3
	mov	r3, r3, lsr #2
	mov	r3, r3, asl #2
	str	r3, [fp, #-40]
	mov	r3, #0
	str	r3, [fp, #-56]
	b	.L2
.L5:
	mov	r3, #0
	str	r3, [fp, #-52]
	b	.L3
.L4:
	sub	r3, fp, #60
	ldr	r0, .L10+4
	mov	r1, r3
	bl	__isoc99_scanf
	ldr	r3, [fp, #-76]
	mov	r2, r3, lsr #2
	ldr	r1, [fp, #-60]
	ldr	r3, [fp, #-40]
	ldr	r0, [fp, #-56]
	mul	r0, r2, r0
	ldr	r2, [fp, #-52]
	add	r2, r0, r2
	str	r1, [r3, r2, asl #2]
	ldr	r3, [fp, #-52]
	add	r3, r3, #1
	str	r3, [fp, #-52]
.L3:
	ldr	r3, [fp, #-68]
	ldr	r2, [fp, #-52]
	cmp	r2, r3
	blt	.L4
	ldr	r3, [fp, #-56]
	add	r3, r3, #1
	str	r3, [fp, #-56]
.L2:
	ldr	r3, [fp, #-64]
	ldr	r2, [fp, #-56]
	cmp	r2, r3
	blt	.L5
	mov	r3, #0
	str	r3, [fp, #-56]
	b	.L6
.L9:
	mov	r3, #0
	str	r3, [fp, #-52]
	b	.L7
.L8:
	ldr	r1, [fp, #-76]
	mov	r2, r1, lsr #2
	ldr	r3, [fp, #-40]
	ldr	r1, [fp, #-56]
	mul	r1, r2, r1
	ldr	r2, [fp, #-52]
	add	r2, r1, r2
	ldr	r3, [r3, r2, asl #2]
	ldr	r0, .L10+8
	mov	r1, r3
	bl	printf
	ldr	r3, [fp, #-52]
	add	r3, r3, #1
	str	r3, [fp, #-52]
.L7:
	ldr	r3, [fp, #-68]
	ldr	r2, [fp, #-52]
	cmp	r2, r3
	blt	.L8
	mov	r0, #10
	bl	putchar
	ldr	r3, [fp, #-56]
	add	r3, r3, #1
	str	r3, [fp, #-56]
.L6:
	ldr	r3, [fp, #-64]
	ldr	r2, [fp, #-56]
	cmp	r2, r3
	blt	.L9
	ldr	sp, [fp, #-72]
	mov	r0, r3
	sub	sp, fp, #32
	ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
.L11:
	.align	2
.L10:
	.word	.LC0
	.word	.LC1
	.word	.LC2
	.size	main, .-main
	.ident	"GCC: (Ubuntu/Linaro 4.7.3-12ubuntu1) 4.7.3"
	.section	.note.GNU-stack,"",%progbits
